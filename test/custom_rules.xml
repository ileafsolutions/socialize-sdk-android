<?xml version="1.0" encoding="UTF-8"?>
<project name="socialize-sdk-test-custom">

    <!--
    ====================================================================================================================
    Socialize Tasks
    ====================================================================================================================
    -->
    <target name="socialize-test" depends="clean,uninstall,socialize-setup,emma,debug,install,test-safe,report"/>

    <!-- Put the taskdef into an antlib so we don't eat up permgen space -->
    <typedef file="antlib-def.xml"/>


    <!-- Setup Custom Paths -->
    <target name="socialize-setup">

        <echo>Removing applications from device</echo>

        <echo>Removing download files from device at ${device.download.path}</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="rm" />
            <arg value="-r" />
            <arg value="${device.download.path}" />
        </exec>

        <echo>Creating download path on device at ${device.download.path}</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="mkdir" />
            <arg value="${device.download.path}" />
        </exec>

        <echo>Creating junit report path on device at ${junit.device.path}</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="mkdir" />
            <arg value="${junit.device.path}" />
        </exec>


        <echo>Cleaning junit report path on local file system at ${junit.device.path}</echo>
        <delete dir="${junit.local.path}"/>

        <echo>Creating junit report path on local file system at ${junit.device.path}</echo>
        <mkdir dir="${junit.local.path}"/>

        <echo>Cleaning coverage report path on local file system at ${emma.local.path}</echo>
        <delete dir="${emma.local.path}"/>

        <echo>Creating coverage report path on local file system at ${emma.local.path}</echo>
        <mkdir dir="${emma.local.path}"/>

        <echo>Clearing logcat buffer</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="logcat" />
            <arg value="-c" />
        </exec>

    </target>


    <target name="report" depends="-setup, emma">

        <property name="tested.project.absolute.dir" location="${tested.project.dir}" />

        <!-- Application package of the tested project extracted from its manifest file -->
        <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
               expression="/manifest/@package" output="tested.project.app.package" />

        <if condition="${emma.enabled}">
            <then>
                <getprojectpaths projectPath="${tested.project.absolute.dir}"
                                 binOut="tested.project.out.absolute.dir"
                                 srcOut="tested.project.source.absolute.dir" />

                <getlibpath projectPath="${tested.project.absolute.dir}"
                            libraryFolderPathOut="tested.project.lib.source.path"
                            leaf="@{source.dir}" />

            </then>
        </if>

        <!-- Most of this target is taken from the original "test" target -->
        <pathconvert property="tested.project.lib.source.path.value" refid="tested.project.lib.source.path">
            <firstmatchmapper>
                <regexpmapper from='^([^ ]*)( .*)$$' to='"\1\2"'/>
                <identitymapper/>
            </firstmatchmapper>
        </pathconvert>

        <echo level="info">Extracting coverage report to ${emma.local.path}...</echo>
        <emma>
            <property name="report.html.out.encoding" value="UTF-8" />
            <report sourcepath="${tested.project.source.absolute.dir}:${tested.project.lib.source.path.value}"
                    verbosity="${verbosity}">

                <!-- TODO: report.dir or something like should be introduced if necessary -->
                <infileset file="${tested.project.out.absolute.dir}/coverage.em" />

                <!-- Socialize Customization Begin
                    ==================================================================================================================
                    Change the input path to be the emma dump folder, not just a single file
                    Change the output path for code coverage
                -->
                <!-- Original path disabled
                <infileset file="${out.absolute.dir}/coverage.ec" />
                -->

                <infileset dir="${out.absolute.dir}" includes="**/*.ec"/>

                <html outfile="${emma.local.path}/coverage.html" />
                <txt outfile="${emma.local.path}/coverage.txt" />
                <xml outfile="${emma.local.path}/coverage.xml" />

                <!-- Socialize Customization End
                    ==================================================================================================================
                    The remainder of this target is unchanged
                -->
            </report>
        </emma>

        <!-- Removed cleanup from original
        <echo level="info">Cleaning up temporary files...</echo>
        <delete file="${out.absolute.dir}/coverage.ec" />
        <delete file="${tested.project.out.absolute.dir}/coverage.em" />
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="run-as" />
            <arg value="${tested.project.app.package}" />
            <arg value="rm" />
            <arg value="${emma.dump.file}" />
        </exec>
        <echo level="info">Saving the coverage reports in ${out.absolute.dir}</echo>
        -->
    </target>

    <!-- Runs all packages defined in test.suite with a full uninstall/reinstall between -->
    <target name="test-suite" depends="clean,socialize-setup">
        <for list="${test.suite}" param="test.package">
            <sequential>
                <antcall target="-test-in-loop" inheritall="true" inheritrefs="true">
                    <param name="test.package" value="@{test.package}" />
                </antcall>
            </sequential>
        </for>

        <!-- Now extract the combined report -->
        <antcall target="report" inheritall="true" inheritrefs="true"/>

    </target>

    <!-- Runs a set of tests with a full uninstall/reinstall -->
    <target name="-test-in-loop" depends="uninstall,emma,debug,install,test-safe"/>

    <target name="test-safe">

        <echo></echo>
        <echo>##################################################################################################</echo>
        <echo># EXECUTING TEST FOR PACKAGE ${test.package}</echo>
        <echo>##################################################################################################</echo>
        <echo></echo>

        <trycatch>
            <try>
                <antcall target="test" inheritall="true" inheritrefs="true"/>
            </try>

            <finally>
                <echo>Dumping and clearing log cat</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="logcat" />
                    <arg value="-d" />
                    <arg value="*:E" />
                </exec>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="logcat" />
                    <arg value="-c" />
                </exec>
            </finally>
        </trycatch>

    </target>

    <!--
    ====================================================================================================================
    End Socialize Tasks
    ====================================================================================================================
    -->



    <!-- Overridden tasks from Android Build Tools
        ================================================================================================================
        The following tasks have been overridden from ${sdk.dir}/tools/ant/build.xml
        ================================================================================================================
    -->


    <target name="-compile" depends="-pre-build, -build-setup, -code-gen, -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">

<!-- Socialize Customization Begin
    ==================================================================================================================
    AndroidMock requires Android Framework classes (from android.jar) to be in the classpath during compilation
    but the -compile target does not provide for changing the classpath.
    Bug filed with Google here: https://code.google.com/p/android/issues/detail?id=53444&thanks=53444&ts=1363819521
-->
            <path id="project.javac.classpath">
                <path refid="project.all.jars.path" />
                <path refid="tested.project.classpath" />
                <pathelement location="${android.classpath}" />
            </path>

<!-- Socialize Customization End
    ==================================================================================================================
    The remainder of this target is unchanged
-->
            <javac encoding="${java.encoding}"
                   source="${java.source}" target="${java.target}"
                   debug="true" extdirs="" includeantruntime="false"
                   destdir="${out.classes.absolute.dir}"
                   bootclasspathref="project.target.class.path"
                   verbose="${verbose}"
                   classpathref="project.javac.classpath"
                   fork="${need.javac.fork}">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <compilerarg line="${java.compilerargs}" />
            </javac>

            <if condition="${build.is.instrumented}">
                <then>
                    <echo level="info">Instrumenting classes from ${out.absolute.dir}/classes...</echo>

                    <!-- build the filter to remove R, Manifest, BuildConfig -->
                    <getemmafilter
                            appPackage="${project.app.package}"
                            libraryPackagesRefId="project.library.packages"
                            filterOut="emma.default.filter"/>

                    <!-- define where the .em file is going. This may have been
                         setup already if this is a library -->
                    <property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />

                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes"
                               metadatafile="${emma.coverage.absolute.file}">
                            <filter excludes="${emma.default.filter}" />
                            <filter value="${emma.filter}" />
                        </instr>
                    </emma>
                </then>
            </if>

            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo level="info">Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo level="info">Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>

                    <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />

                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}"
                                 includes="**/*.class"
                                 excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>

        </do-only-if-manifest-hasCode>
    </target>


    <target name="test" depends="-test-project-check"
            description="Runs tests from the package defined in test.package property">
        <property name="test.runner" value="android.test.InstrumentationTestRunner" />

        <if condition="${project.is.test}">
            <then>
                <property name="tested.project.absolute.dir" location="${tested.project.dir}" />

                <!-- Application package of the tested project extracted from its manifest file -->
                <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
                       expression="/manifest/@package" output="tested.project.app.package" />

                <if condition="${emma.enabled}">
                    <then>
                        <getprojectpaths projectPath="${tested.project.absolute.dir}"
                                         binOut="tested.project.out.absolute.dir"
                                         srcOut="tested.project.source.absolute.dir" />

                        <getlibpath projectPath="${tested.project.absolute.dir}"
                                    libraryFolderPathOut="tested.project.lib.source.path"
                                    leaf="@{source.dir}" />

                    </then>
                </if>

            </then>
            <else>
                <!-- this is a test app, the tested package is the app's own package -->
                <property name="tested.project.app.package" value="${project.app.package}" />

                <if condition="${emma.enabled}">
                    <then>
                        <property name="tested.project.out.absolute.dir" value="${out.absolute.dir}" />
                        <property name="tested.project.source.absolute.dir" value="${source.absolute.dir}" />

                        <getlibpath
                                libraryFolderPathOut="tested.project.lib.source.path"
                                leaf="@{source.dir}" />

                    </then>
                </if>

            </else>
        </if>

<!-- Socialize Customization Start
    ==================================================================================================================
    Emma coverage files are also renamed to match the package under test.

-->
        <!-- Set the name of the generated coverage file to include the test package -->
        <property name="emma.dump.name.raw" value="coverage-${test.package}"/>

        <!-- Replace dots with underscores in the file name -->
        <propertyregex property="emma.dump.name.replaced"
                       input="${emma.dump.name.raw}"
                       regexp="\."
                       replace="_"
                       global="true" />

        <property name="emma.dump.name" value="${emma.dump.name.replaced}.ec"/>
        <property name="emma.dump.path" value="/data/data/${tested.project.app.package}"/>
        <property name="emma.dump.file" value="${emma.dump.path}/${emma.dump.name}"/>

        <!-- Original property assignment is disabled
        <property name="emma.dump.file"
                  value="/data/data/${tested.project.app.package}/coverage.ec" />
        -->

<!-- Socialize Customization Stop
    ==================================================================================================================
    The the next customization is in the <run-tests-helper> macro
-->

        <if condition="${emma.enabled}">
            <then>
                <echo>Running tests for package ${test.package}...</echo>
                <run-tests-helper emma.enabled="true">


<!-- Socialize Customization Start
    ==================================================================================================================
    We need to customize the output folder for the junit test output so we can effectively pull the result files from
    the device but the "test" target does not allow for customization of instrumentation args.
    Bug filed with Google here: https://code.google.com/p/android/issues/detail?id=53443

    Additional argument (test.package) added to limit the tests to a specific package

-->
                <extra-instrument-args>

                    <arg value="-e" />
                    <arg value="coverageFile" />
                    <arg value="${emma.dump.file}" />


                    <arg value="-e" />
                    <arg value="package" />
                    <arg value="${test.package}" />

                    <arg value="-e" />
                    <arg value="junitOutputDirectory" />
                    <arg value="${junit.device.path}" />

                </extra-instrument-args>

<!-- Socialize Customization Stop
    ==================================================================================================================
    The the next customization is in the <emma> sub task
-->

                </run-tests-helper>


<!-- Socialize Customization Start
    ==================================================================================================================
    Most of the report extraction moved to a new target, just the pulling of the file is left here
-->

                <echo level="info">Setting permission to download the coverage file...</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="shell" />
                    <arg value="run-as" />
                    <arg value="${tested.project.app.package}" />
                    <arg value="chmod" />
                    <arg value="644" />
                    <arg value="${emma.dump.file}" />
                </exec>
                <echo level="info">Downloading coverage file into project directory...</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="pull" />
                    <arg value="${emma.dump.file}" />
                    <arg path="${out.absolute.dir}/${emma.dump.name}" />
                </exec>

                <!-- Add download of junit results -->
                <echo>Pulling junit files from ${junit.device.path} to ${junit.local.path}</echo>
                <exec executable="${adb}" failonerror="true" dir="${junit.local.path}">
                    <arg line="${adb.device.arg}" />
                    <arg value="pull" />
                    <arg value="${junit.device.path}" />
                </exec>

<!-- Socialize Customization Stop
    ==================================================================================================================
-->
            </then>
            <else>
                <run-tests-helper />
            </else>
        </if>
    </target>

</project>